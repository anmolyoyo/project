# Part A: Data Handling

### 1. Create a pandas Series from a dictionary of values and a NumPy array.

**Code:**
```python
import pandas as pd
import numpy as np

# From dictionary
data_dict = {'a': 10, 'b': 20, 'c': 30, 'd': 40}
series_from_dict = pd.Series(data_dict)
print("--- Series from Dictionary ---")
print(series_from_dict)

# From NumPy array
data_np = np.array([100, 200, 300, 400, 500])
series_from_np = pd.Series(data_np)
print("\n--- Series from NumPy array ---")
print(series_from_np)

Output:
--- Series from Dictionary ---
a    10
b    20
c    30
d    40
dtype: int64

--- Series from NumPy array ---
0    100
1    200
2    300
3    400
4    500
dtype: int64

2. Create a series that stores the area of some states in km².
a) Write code to find out the biggest and smallest three areas from the given series. b) Write code to find out the areas that are more than 50000 km².
Code:
import pandas as pd

areas_km2 = pd.Series({
   'Maharashtra': 307713,
   'Rajasthan': 342239,
   'Madhya Pradesh': 308252,
   'Uttar Pradesh': 240928,
   'Gujarat': 196024,
   'Karnataka': 191791,
   'Goa': 3702
})

print("--- Original Series ---")
print(areas_km2)

# a) Biggest and smallest three areas
print("\n--- Three Largest Areas ---")
print(areas_km2.nlargest(3))

print("\n--- Three Smallest Areas ---")
print(areas_km2.nsmallest(3))

# b) Areas more than 50000 km²
print("\n--- Areas > 50000 km² ---")
print(areas_km2[areas_km2 > 50000])

Output:
--- Original Series ---
Maharashtra       307713
Rajasthan         342239
Madhya Pradesh    308252
Uttar Pradesh     240928
Gujarat           196024
Karnataka         191791
Goa                 3702
dtype: int64

--- Three Largest Areas ---
Rajasthan         342239
Madhya Pradesh    308252
Maharashtra       307713
dtype: int64

--- Three Smallest Areas ---
Goa                  3702
Karnataka          191791
Gujarat            196024
dtype: int64

--- Areas > 50000 km² ---
Maharashtra       307713
Rajasthan         342239
Madhya Pradesh    308252
Uttar Pradesh     240928
Gujarat           196024
Karnataka         191791
dtype: int64

3. Write a program to create a Series object with 6 random integers and having indexes as ['p','q','r','s','t','v']. Also write program to calculate cubes of the Series values.
Code:
import pandas as pd
import numpy as np

# Create a series with random integers
random_integers = np.random.randint(1, 100, size=6)
indices = ['p', 'q', 'r', 's', 't', 'v']
my_series = pd.Series(random_integers, index=indices)

print("--- Original Series with Random Integers ---")
print(my_series)

# Calculate the cube of the series values
cubed_series = my_series ** 3
# or using apply: cubed_series = my_series.apply(lambda x: x**3)

print("\n--- Cubed Series Values ---")
print(cubed_series)

Output (will vary due to randomness):
--- Original Series with Random Integers ---
p    83
q    67
r    22
s    94
t    55
v    13
dtype: int64

--- Cubed Series Values ---
p    571787
q    300763
r     10648
s    830584
t    166375
v      2197
dtype: int64

4. Consider the following dataframe: CORONA and answer the questions given below (and other DataFrame questions).
This section combines all parts of question 4 from the image.
Code:
import pandas as pd

# Initial DataFrame for CORONA question
data = {'ID': [100, 110, 120, 130],
       'State': ['Delhi', 'Mumbai', 'Chennai', 'Surat'],
       'Cases': [3000, 4000, 5000, 4500]}
df_corona = pd.DataFrame(data).set_index('ID')
print("--- Initial CORONA DataFrame ---")
print(df_corona)

# b) Add "Recovery" column
recovery_data = pd.Series([2500, 3500, 4200, 4000], index=[100, 110, 120, 130])
df_corona['Recovery'] = recovery_data
print("\n--- b) Added 'Recovery' column ---")
print(df_corona)

# c) Add "Deaths" column
df_corona = df_corona.assign(Deaths=[50, 80, 90, 60])
print("\n--- c) Added 'Deaths' column ---")
print(df_corona)

# d) Insert "Recovery Percentage" column
recovery_percentage = (df_corona['Recovery'] / df_corona['Cases']) * 100
df_corona.insert(2, 'Recovery Percentage', recovery_percentage)
print("\n--- d) Inserted 'Recovery Percentage' ---")
print(df_corona)

# e) Delete "Recovery Percentage" column
del df_corona['Recovery Percentage']
print("\n--- e) Deleted 'Recovery Percentage' ---")
print(df_corona)

# f) Delete "Deaths" column using pop()
deaths_popped = df_corona.pop('Deaths')
print("\n--- f) Deleted 'Deaths' column ---")
print(df_corona)

# g) Insert a new row
# Note: Inserting at a specific integer position (like 1st) is tricky with non-integer indexes.
# A more common approach is to add the row and then sort the index if needed.
df_corona.loc[90] = ['Pune', 6000, 5500] # Add new row
df_corona = df_corona.sort_index() # Sort by index to place it at the beginning
print("\n--- g) Inserted new row and sorted index ---")
print(df_corona)

# h) Temporarily delete columns
temp_df = df_corona.drop(columns=['Cases', 'State'])
print("\n--- h) Temporarily dropped columns ---")
print(temp_df)

# --- Create a dataframe from two series ---
# This corresponds to the "Create a dataframe of two series" part of the question
names = pd.Series(['Alice', 'Bob', 'Charlie', 'David', 'Eve'])
grades = pd.Series(['A', 'B', 'A', 'C', 'B'])
marks = pd.Series([92, 85, 89, 78, 81])
df_students = pd.DataFrame({'Name': names, 'Grade': grades, 'Marks': marks})
print("\n\n--- Student DataFrame ---")
print(df_students)

# a) Display the first three records
print("\n--- a) First three students ---")
print(df_students.head(3))

# b) Display the last two records
print("\n--- b) Last two students ---")
print(df_students.tail(2))

Output:
--- Initial CORONA DataFrame ---
        State  Cases
ID                   
100    Delhi   3000
110   Mumbai   4000
120  Chennai   5000
130    Surat   4500

--- b) Added 'Recovery' column ---
        State  Cases  Recovery
ID                             
100    Delhi   3000      2500
110   Mumbai   4000      3500
120  Chennai   5000      4200
130    Surat   4500      4000

--- c) Added 'Deaths' column ---
        State  Cases  Recovery  Deaths
ID                                     
100    Delhi   3000      2500      50
110   Mumbai   4000      3500      80
120  Chennai   5000      4200      90
130    Surat   4500      4000      60

--- d) Inserted 'Recovery Percentage' ---
        State  Cases  Recovery Percentage  Recovery  Deaths
ID                                                         
100    Delhi   3000            83.333333      2500      50
110   Mumbai   4000            87.500000      3500      80
120  Chennai   5000            84.000000      4200      90
130    Surat   4500            88.888889      4000      60

--- e) Deleted 'Recovery Percentage' ---
        State  Cases  Recovery  Deaths
ID                                     
100    Delhi   3000      2500      50
110   Mumbai   4000      3500      80
120  Chennai   5000      4200      90
130    Surat   4500      4000      60

--- f) Deleted 'Deaths' column ---
        State  Cases  Recovery
ID                             
100    Delhi   3000      2500
110   Mumbai   4000      3500
120  Chennai   5000      4200
130    Surat   4500      4000

--- g) Inserted new row and sorted index ---
      State  Cases  Recovery
ID                           
90      Pune   6000      5500
100    Delhi   3000      2500
110   Mumbai   4000      3500
120  Chennai   5000      4200
130    Surat   4500      4000

--- h) Temporarily dropped columns ---
    Recovery
ID           
90       5500
100      2500
110      3500
120      4200
130      4000


--- Student DataFrame ---
     Name Grade  Marks
0    Alice     A     92
1      Bob     B     85
2  Charlie     A     89
3    David     C     78
4      Eve     B     81

--- a) First three students ---
     Name Grade  Marks
0    Alice     A     92
1      Bob     B     85
2  Charlie     A     89

--- b) Last two students ---
   Name Grade  Marks
3  David     C     78
4    Eve     B     81

5. Create a dataframe of dictionary consisting of Name, Sub1, Sub2, Sub3, Sub4, Sub5 of five students.
a) Display the dataframe. b) Display the first 5 rows and bottom 3 rows of student dataframe.
Code:
import pandas as pd

student_data = {
   'Name': ['Ravi', 'Sonia', 'John', 'Mita', 'Farah'],
   'Sub1': [85, 90, 78, 88, 92],
   'Sub2': [80, 85, 82, 90, 88],
   'Sub3': [92, 88, 85, 76, 95],
   'Sub4': [78, 92, 88, 85, 80],
   'Sub5': [88, 78, 90, 82, 84]
}
df_marks = pd.DataFrame(student_data)

# a) Display the dataframe
print("--- a) Student Marks DataFrame ---")
print(df_marks)

# b) Display first 5 and bottom 3 rows
# Note: Since there are only 5 students, head(5) will show all students.
print("\n--- b) First 5 rows ---")
print(df_marks.head(5))

print("\n--- b) Bottom 3 rows ---")
print(df_marks.tail(3))

Output:
--- a) Student Marks DataFrame ---
   Name  Sub1  Sub2  Sub3  Sub4  Sub5
0   Ravi    85    80    92    78    88
1  Sonia    90    85    88    92    78
2   John    78    82    85    88    90
3   Mita    88    90    76    85    82
4  Farah    92    88    95    80    84

--- b) First 5 rows ---
   Name  Sub1  Sub2  Sub3  Sub4  Sub5
0   Ravi    85    80    92    78    88
1  Sonia    90    85    88    92    78
2   John    78    82    85    88    90
3   Mita    88    90    76    85    82
4  Farah    92    88    95    80    84

--- b) Bottom 3 rows ---
   Name  Sub1  Sub2  Sub3  Sub4  Sub5
2   John    78    82    85    88    90
3   Mita    88    90    76    85    82
4  Farah    92    88    95    80    84

6. Create two dataframes of salary of five employees and do the following:
a) Display both the dataframes. b) Add 5000 as bonus in both dataframes and display them.
Code:
import pandas as pd

# Create first dataframe
emp_data1 = {'EmpID': ['E01', 'E02', 'E03', 'E04', 'E05'],
            'Name': ['Arun', 'Bina', 'Chris', 'Diya', 'Evan'],
            'Salary': [50000, 60000, 55000, 70000, 65000]}
df_emp1 = pd.DataFrame(emp_data1)

# Create second dataframe
emp_data2 = {'EmpID': ['E06', 'E07', 'E08', 'E09', 'E10'],
            'Name': ['Fia', 'Gaurav', 'Hina', 'Ira', 'Jay'],
            'Salary': [48000, 72000, 80000, 61000, 59000]}
df_emp2 = pd.DataFrame(emp_data2)

# a) Display both dataframes
print("--- a) Employee DataFrame 1 ---")
print(df_emp1)
print("\n--- a) Employee DataFrame 2 ---")
print(df_emp2)

# b) Add 5000 bonus
df_emp1['Salary'] = df_emp1['Salary'] + 5000
df_emp2['Salary'] = df_emp2['Salary'] + 5000

print("\n--- b) DataFrame 1 with Bonus ---")
print(df_emp1)
print("\n--- b) DataFrame 2 with Bonus ---")
print(df_emp2)

Output:
--- a) Employee DataFrame 1 ---
 EmpID   Name  Salary
0   E01   Arun   50000
1   E02   Bina   60000
2   E03  Chris   55000
3   E04   Diya   70000
4   E05   Evan   65000

--- a) Employee DataFrame 2 ---
 EmpID    Name  Salary
0   E06     Fia   48000
1   E07  Gaurav   72000
2   E08    Hina   80000
3   E09     Ira   61000
4   E10     Jay   59000

--- b) DataFrame 1 with Bonus ---
 EmpID   Name  Salary
0   E01   Arun   55000
1   E02   Bina   65000
2   E03  Chris   60000
3   E04   Diya   75000
4   E05   Evan   70000

--- b) DataFrame 2 with Bonus ---
 EmpID    Name  Salary
0   E06     Fia   53000
1   E07  Gaurav   77000
2   E08    Hina   85000
3   E09     Ira   66000
4   E10     Jay   64000

7. Create a dataframe using list [10, 11, 12, 13, 14] [23,34,45,32,65] [55,60,65,70,75] and do the following:
a) Display the dataframe. b) Add the list [1, 2, 3, 4, 5] to dataframe and display it.
Code:
import pandas as pd

# a) Create and display the dataframe
list_data = [
   [10, 11, 12, 13, 14],
   [23, 34, 45, 32, 65],
   [55, 60, 65, 70, 75]
]
# Pandas transposes the list of lists by default, so we transpose it back with .T
df_from_lists = pd.DataFrame(list_data).T
df_from_lists.columns = ['List1', 'List2', 'List3']
print("--- a) DataFrame from Lists ---")
print(df_from_lists)

# b) Add a new list as a column
new_list = [1, 2, 3, 4, 5]
df_from_lists['List4'] = new_list
print("\n--- b) DataFrame with Added List ---")
print(df_from_lists)


Output:
--- a) DataFrame from Lists ---
  List1  List2  List3
0     10     23     55
1     11     34     60
2     12     45     65
3     13     32     70
4     14     65     75

--- b) DataFrame with Added List ---
  List1  List2  List3  List4
0     10     23     55      1
1     11     34     60      2
2     12     45     65      3
3     13     32     70      4
4     14     65     75      5

8. Create a dataframe of [23, 25], [34], [43,44,45,46] and do the following:
a) Display the dataframe. Notice that the missing value is represented by NaN. b) Replace the missing value with 0. c) Replace the missing value with -1, -2, -3, -4 for columns 0, 1, 2, 3. d) Replace the missing value by copying the value from the above cell.
Code:
import pandas as pd
import numpy as np

# The lists have different lengths, so pandas will pad with NaN
uneven_lists = [[23, 25], [34], [43, 44, 45, 46]]
# To create a DataFrame from uneven lists, we can create a Series for each
s1 = pd.Series([23, 25])
s2 = pd.Series([34])
s3 = pd.Series([43, 44, 45, 46])
df_nan = pd.DataFrame({'Col1': s1, 'Col2': s2, 'Col3': s3})

# a) Display the dataframe
print("--- a) DataFrame with NaN values ---")
print(df_nan)

# b) Replace missing value with 0
df_filled_zero = df_nan.fillna(0)
print("\n--- b) Replaced NaN with 0 ---")
print(df_filled_zero)

# c) Replace missing value with specific values per column
# For this, we create a new copy to work on
df_specific_fill = df_nan.copy()
fill_values = {'Col1': -1, 'Col2': -2, 'Col3': -3} # Only need to define for columns with NaNs
df_specific_fill = df_specific_fill.fillna(value=fill_values)
print("\n--- c) Replaced NaN with specific values (-1, -2, -3) ---")
print(df_specific_fill)

# d) Replace missing value by copying the value from the above cell
df_ffill = df_nan.fillna(method='ffill')
print("\n--- d) Replaced NaN with forward fill ---")
print(df_ffill)

Output:
--- a) DataFrame with NaN values ---
  Col1  Col2  Col3
0  23.0  34.0    43
1  25.0   NaN    44
2   NaN   NaN    45
3   NaN   NaN    46

--- b) Replaced NaN with 0 ---
  Col1  Col2  Col3
0  23.0  34.0    43
1  25.0   0.0    44
2   0.0   0.0    45
3   0.0   0.0    46

--- c) Replaced NaN with specific values (-1, -2, -3) ---
  Col1  Col2  Col3
0  23.0  34.0    43
1  25.0  -2.0    44
2  -1.0  -2.0    45
3  -1.0  -2.0    46

--- d) Replaced NaN with forward fill ---
  Col1  Col2  Col3
0  23.0  34.0    43
1  25.0  34.0    44
2  25.0  34.0    45
3  25.0  34.0    46